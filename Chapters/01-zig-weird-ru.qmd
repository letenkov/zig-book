---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```

# Введение в Zig

В этой главе я хочу познакомить вас с миром Zig. Zig — это очень молодой язык, который активно развивается. В результате его мир все еще очень дикий и требует исследования. Эта книга — моя попытка помочь вам в вашем личном путешествии по пониманию и исследованию захватывающего мира Zig.

Я предполагаю, что у вас есть предыдущий опыт работы с каким-либо языком программирования, не обязательно с низкоуровневым. Так что, если у вас есть опыт работы с Python или Javascript, например, это будет нормально. Но если у вас есть опыт работы с низкоуровневыми языками, такими как C, C++ или Rust, вы, вероятно, будете учиться быстрее на протяжении всей этой книги.

## Что такое Zig?

Zig — это современный, низкоуровневый и универсальный язык программирования. Некоторые программисты считают Zig современной и улучшенной версией C.

В личной интерпретации автора, Zig тесно связан с принципом "меньше — значит больше". Вместо того чтобы становиться современным языком, добавляя все больше и больше функций, многие из основных улучшений, которые Zig приносит на стол, на самом деле связаны с удалением раздражающих поведений/функций из C и C++. Другими словами, Zig стремится стать лучше, упрощая язык и обеспечивая более последовательное и надежное поведение. В результате анализ, написание и отладка приложений становятся гораздо проще и легче в Zig, чем в C или C++.

Эта философия становится ясной благодаря следующей фразе с официального сайта Zig:

> "Сосредоточьтесь на отладке вашего приложения, а не на отладке ваших знаний о языке программирования".

Эта фраза особенно актуальна для программистов на C++. Потому что C++ — это огромный язык с множеством функций, и также существует множество различных "вкусов C++". Эти элементы делают C++ таким сложным и трудным для изучения. Zig стремится идти в противоположном направлении. Zig — это очень простой язык, более близкий к другим простым языкам, таким как C и Go.

Эта фраза также важна и для программистов на C. Потому что, даже будучи простым языком, иногда все равно сложно читать и понимать код на C. Например, макросы препроцессора в C часто становятся источником путаницы. Иногда они действительно затрудняют отладку программ на C. Потому что макросы по сути являются вторым языком, встроенным в C, который затемняет ваш код на C. С макросами вы больше не уверены на 100%, какие части кода отправляются компилятору, т.е. они затемняют фактический исходный код, который вы написали.

В Zig нет макросов. В Zig код, который вы пишете, — это фактический код, который компилируется компилятором. У вас также нет скрытого потока управления, происходящего за кулисами. И у вас также нет функций или операторов из стандартной библиотеки, которые выполняют скрытые выделения памяти за вашей спиной.

Будучи более простым языком, Zig становится гораздо более ясным и легким для чтения/написания, но в то же время он также достигает гораздо более надежного состояния с более последовательным поведением в крайних ситуациях. Еще раз, меньше — значит больше.
