---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```

# Введение в Zig

В этой главе я хочу познакомить вас с миром Zig. Zig — это очень молодой язык, который активно развивается. В результате его мир все еще очень дикий и требует исследования. Эта книга — моя попытка помочь вам в вашем личном путешествии по пониманию и исследованию захватывающего мира Zig.

Я предполагаю, что у вас есть предыдущий опыт работы с каким-либо языком программирования, не обязательно с низкоуровневым. Так что, если у вас есть опыт работы с Python или Javascript, например, это будет нормально. Но если у вас есть опыт работы с низкоуровневыми языками, такими как C, C++ или Rust, вы, вероятно, будете учиться быстрее на протяжении всей этой книги.

## Что такое Zig?

Zig — это современный, низкоуровневый и универсальный язык программирования. Некоторые программисты считают Zig современной и улучшенной версией C.

В личной интерпретации автора, Zig тесно связан с принципом "меньше — значит больше". Вместо того чтобы становиться современным языком, добавляя все больше и больше функций, многие из основных улучшений, которые Zig приносит на стол, на самом деле связаны с удалением раздражающих поведений/функций из C и C++. Другими словами, Zig стремится стать лучше, упрощая язык и обеспечивая более последовательное и надежное поведение. В результате анализ, написание и отладка приложений становятся гораздо проще и легче в Zig, чем в C или C++.

Эта философия становится ясной благодаря следующей фразе с официального сайта Zig:

> "Сосредоточьтесь на отладке вашего приложения, а не на отладке ваших знаний о языке программирования".

Эта фраза особенно актуальна для программистов на C++. Потому что C++ — это огромный язык с множеством функций, и также существует множество различных "вкусов C++". Эти элементы делают C++ таким сложным и трудным для изучения. Zig стремится идти в противоположном направлении. Zig — это очень простой язык, более близкий к другим простым языкам, таким как C и Go.

Эта фраза также важна и для программистов на C. Потому что, даже будучи простым языком, иногда все равно сложно читать и понимать код на C. Например, макросы препроцессора в C часто становятся источником путаницы. Иногда они действительно затрудняют отладку программ на C. Потому что макросы по сути являются вторым языком, встроенным в C, который затемняет ваш код на C. С макросами вы больше не уверены на 100%, какие части кода отправляются компилятору, т.е. они затемняют фактический исходный код, который вы написали.

В Zig нет макросов. В Zig код, который вы пишете, — это фактический код, который компилируется компилятором. У вас также нет скрытого потока управления, происходящего за кулисами. И у вас также нет функций или операторов из стандартной библиотеки, которые выполняют скрытые выделения памяти за вашей спиной.

Будучи более простым языком, Zig становится гораздо более ясным и легким для чтения/написания, но в то же время он также достигает гораздо более надежного состояния с более последовательным поведением в крайних ситуациях. Еще раз, меньше — значит больше.

## Программа "Hello World" на Zig

Мы начинаем наше путешествие в Zig с создания небольшой программы "Hello World".
Чтобы начать новый проект на Zig на вашем компьютере, просто вызовите команду `init`
из компилятора `zig`.
Создайте новую директорию на вашем компьютере, затем инициализируйте новый проект Zig
внутри этой директории, вот так:

```bash
mkdir hello_world
cd hello_world
zig init
```

```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

### Понимание файлов проекта {#sec-project-files}

После выполнения команды `init` из компилятора `zig`, в текущем каталоге создаются новые файлы. Во-первых, создается каталог "source" (`src`), содержащий два файла: `main.zig` и `root.zig`. Каждый файл с расширением `.zig` является отдельным модулем Zig, который представляет собой текстовый файл с кодом на Zig.

По соглашению, модуль `main.zig` — это место, где находится ваша основная функция. Таким образом, если вы создаете исполняемую программу на Zig, вам нужно объявить функцию `main()`, которая представляет точку входа вашей программы, то есть место, с которого начинается выполнение вашей программы.

Однако, если вы создаете библиотеку (вместо исполняемой программы), то обычная процедура заключается в удалении файла `main.zig` и начале работы с модулем `root.zig`. По соглашению, модуль `root.zig` является корневым исходным файлом вашей библиотеки.

```bash
tree .
```

```
.
├── build.zig
├── build.zig.zon
└── src
    ├── main.zig
    └── root.zig

1 directory, 4 files
```

Команда `init` также создает два дополнительных файла в рабочем каталоге: `build.zig` и `build.zig.zon`. Первый файл (`build.zig`) представляет собой скрипт сборки, написанный на Zig. Этот скрипт выполняется при вызове команды `build` из компилятора `zig`. Другими словами, этот файл содержит код на Zig, который выполняет необходимые шаги для сборки всего проекта.

Языки низкого уровня обычно используют компилятор для сборки вашего исходного кода в бинарные исполняемые файлы или бинарные библиотеки. Тем не менее, процесс компиляции вашего исходного кода и создания бинарных исполняемых файлов или бинарных библиотек из него стал настоящей проблемой в мире программирования, когда проекты стали становиться все больше и больше. В результате программисты создали "системы сборки", которые представляют собой второй набор инструментов, предназначенных для упрощения этого процесса компиляции и сборки сложных проектов.

Примеры систем сборки включают CMake, GNU Make, GNU Autoconf и Ninja, которые используются для сборки сложных проектов на C и C++. С помощью этих систем можно писать скрипты, которые называются "скриптами сборки". Они просто описывают необходимые шаги для компиляции/сборки вашего проекта.

Однако это отдельные инструменты, которые не принадлежат компиляторам C/C++, таким как `gcc` или `clang`. В результате, в проектах на C/C++ вам нужно не только устанавливать и управлять компиляторами C/C++, но и устанавливать и управлять этими системами сборки отдельно.

В Zig нам не нужно использовать отдельный набор инструментов для сборки наших проектов, потому что система сборки встроена в сам язык. Мы можем использовать эту систему сборки для написания небольших скриптов на Zig, которые описывают необходимые шаги для сборки/компиляции нашего проекта на Zig[^zig-build-system]. Таким образом, все, что вам нужно для сборки сложного проекта на Zig, это компилятор `zig`, и ничего больше.

[^zig-build-system]: <https://ziglang.org/learn/overview/#zig-build-system>.

Второй сгенерированный файл (`build.zig.zon`) — это файл, похожий на JSON, в котором вы можете описать свой проект, а также объявить набор зависимостей вашего проекта, которые вы хотите получить из интернета. Другими словами, вы можете использовать этот файл `build.zig.zon` для включения списка внешних библиотек в ваш проект.

Один из возможных способов включения внешней библиотеки Zig в ваш проект — это вручную собрать и установить библиотеку в вашей системе и просто связать ваш исходный код с библиотекой на этапе сборки вашего проекта.

Однако, если эта внешняя библиотека Zig доступна на GitHub, например, и у нее есть действительный файл `build.zig.zon` в корневой папке проекта, который описывает проект, вы можете легко включить эту библиотеку в ваш проект, просто указав эту внешнюю библиотеку в вашем файле `build.zig.zon`.

Другими словами, этот файл `build.zig.zon` работает аналогично файлу `package.json` в проектах на Javascript, или файлу `Pipfile` в проектах на Python, или файлу `Cargo.toml` в проектах на Rust. Вы можете прочитать больше об этом конкретном файле в нескольких статьях в интернете[^zig-zon][^zig-zon2], а также можете увидеть ожидаемую схему для этого файла `build.zig.zon` в документации внутри официального репозитория Zig[^zig-zon-schema].

[^zig-zon]: <https://zig.news/edyu/zig-package-manager-wtf-is-zon-558e>
[^zig-zon2]: <https://medium.com/@edlyuu/zig-package-manager-2-wtf-is-build-zig-zon-and-build-zig-0-11-0-update-5bc46e830fc1>
[^zig-zon-schema]: <https://github.com/ziglang/zig/blob/master/doc/build.zig.zon.md>
